openapi: 3.1.0
info:
  title: viral-scout
  version: "1.0.0"
servers:
  - url: https://YOUR_VERCEL_DOMAIN
paths:
  /api/youtube/top_shorts:
    get:
      summary: Get recent high-performing Shorts by keyword
      operationId: getTopShorts
      parameters:
        - in: query
          name: q
          required: true
          schema: { type: string }
        - in: query
          name: published_after
          required: false
          schema: { type: string, format: date-time }
        - in: query
          name: max_results
          required: false
          schema: { type: integer, default: 20, minimum: 1, maximum: 50 }
        - in: query
          name: regionCode
          required: false
          schema: { type: string, default: "US" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        videoId: { type: string }
                        title: { type: string }
                        channelTitle: { type: string }
                        url: { type: string }
                        viewCount: { type: integer }
                        likeCount: { type: integer }
                        duration: { type: string }
                        publishedAt: { type: string, format: date-time }
                        isShort: { type: boolean }
        "401": { description: Unauthorized }
        "500": { description: Upstream error }
  /api/trends/rising:
    get:
      summary: Rising related queries for a keyword
      operationId: getRising
      parameters:
        - in: query
          name: keyword
          required: true
          schema: { type: string }
        - in: query
          name: geo
          required: false
          schema: { type: string, default: "US" }
        - in: query
          name: timeframe
          required: false
          schema: { type: string, default: "now 7-d" }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  related_queries:
                    type: array
                    items:
                      type: object
                      properties:
                        query: { type: string }
                        value: { type: integer }
        "401": { description: Unauthorized }
        "500": { description: Upstream error }
  /api/reddit/search:
    get:
      summary: Search Reddit posts in select subs
      operationId: searchReddit
      parameters:
        - in: query
          name: subreddits
          required: true
          schema: { type: string }
          example: "soccer,footballhighlights,youtube,shorts"
        - in: query
          name: q
          required: false
          schema: { type: string }
        - in: query
          name: sort
          required: false
          schema: { type: string, enum: [hot, top, new], default: hot }
        - in: query
          name: limit
          required: false
          schema: { type: integer, default: 25, minimum: 1, maximum: 100 }
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      type: object
                      properties:
                        title: { type: string }
                        url: { type: string }
                        score: { type: integer }
                        num_comments: { type: integer }
                        subreddit: { type: string }
                        created_utc: { type: number }
        "401": { description: Unauthorized }
        "500": { description: Upstream error }
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
security:
  - ApiKeyAuth: []
